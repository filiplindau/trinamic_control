#	"$Name:  $";
#	"$Header:  $";
#=============================================================================
#
# file :        Trinamic_TMCM610_DS2.py
#
# description : Python source for the Trinamic_TMCM610_DS2 and its commands. 
#                The class is derived from Device. It represents the
#                CORBA servant object which will be accessed from the
#                network. All commands which can be executed on the
#                Trinamic_TMCM610_DS2 are implemented in this file.
#
# project :     TANGO Device Server
#
# $Author:  $
#
# $Revision:  $
#
# $Log:  $
#
# copyleft :    European Synchrotron Radiation Facility
#               BP 220, Grenoble 38043
#               FRANCE
#
#=============================================================================
#  		This file is generated by POGO
#	(Program Obviously used to Generate tango Object)
#
#         (c) - Software Engineering Group - ESRF
#=============================================================================
#


import PyTango
import sys
import threading
import Queue
import time
import Trinamic_control as tc
import numpy as np


#==================================================================
#   Trinamic_TMCM610_DS2 Class Description:
#
#         Control of the trinamic TMCM610 motion controller
#
#==================================================================
# 	Device States Description:
#
#   DevState.ON :       Connected to the TMCM610
#   DevState.OFF :      Disconnected from the TMCM610
#   DevState.MOVING :   At least one motor is moving
#   DevState.FAULT :    Fault detected
#   DevState.ALARM :    Alarm state
#   DevState.UNKNOWN :  Connection failed
#==================================================================


class Trinamic_TMCM610_DS2(PyTango.Device_4Impl):

#--------- Add you global variables here --------------------------

#------------------------------------------------------------------
#	Device constructor
#------------------------------------------------------------------
	def __init__(self,cl, name):
		PyTango.Device_4Impl.__init__(self,cl,name)
		Trinamic_TMCM610_DS2.init_device(self)

#------------------------------------------------------------------
#	Device destructor
#------------------------------------------------------------------
	def delete_device(self):
		print "[Device delete_device method] for device",self.get_name()
		self.monitorQueue.put('exit')
		self.monitorThread.join(2)


#------------------------------------------------------------------
#	Device initialization
#------------------------------------------------------------------
	def init_device(self):
		print "In ", self.get_name(), "::init_device()"
		self.set_state(PyTango.DevState.UNKNOWN)
		try:
			self.get_device_properties(self.get_device_class())
			print 'Port used: ', self.Port
		except Exception, e:
			self.error_stream('Could not read device properties')
			self.error_stream(str(e))
			print 'Could not read device properties'
			self.set_state(PyTango.DevState.FAULT)
		try:
			self.TC = tc.Trinamic_control()			
			self.set_state(PyTango.DevState.OFF)
			self.set_status('Disconnected from motor controller')
			self.info_stream('Trinamic control object created.')
		except Exception, e:
			self.error_stream('Motor controller object creation failed.')
			self.set_state(PyTango.DevState.UNKNOWN)
			self.set_status('Failed to create motor controller object.')
			PyTango.Except.throw_exception('Motor controller creation fail',
										str(e), 'init_device', PyTango.ErrSeverity.ERR)
			self.TC = None


		self.hardwarePollingPeriod = 0.5
		self.actualPositions = [None, None, None, None, None, None]
		self.actualSpeeds = [None, None, None, None, None, None]
		self.pulseDivisors = [1, 1, 1, 1, 1, 1]
		self.microstepResolutions = [1, 1, 1, 1, 1, 1]
		self.targetPositions = [None, None, None, None, None, None]
		self.targetSpeeds = [None, None, None, None, None, None]
		self.limitSwitches0 = [None, None, None, None, None, None]
		self.limitSwitches1 = [None, None, None, None, None, None]
		self.limitSwitchPolarity = [0, 0, 0, 0, 0, 0]
		self.maxCurrents = [0, 0, 0, 0, 0, 0]
		
		self.accelerations = [2000, 2000, 2000, 2000, 2000, 2000]
		
		self.hardwareLock = threading.Lock()
		self.stopHardwareThreadFlag = False
		
		self.monitorQueue = Queue.Queue()
		self.monitorThread = threading.Thread()
		threading.Thread.__init__(self.monitorThread, target=self.monitorHardware)
		self.monitorThread.start()

#------------------------------------------------------------------
#	Always excuted hook method
#------------------------------------------------------------------
	def always_executed_hook(self):
#		print "In ", self.get_name(), "::always_excuted_hook()"
		pass


	def monitorHardware(self):
		task = ''
		while task != 'exit':
			task = self.monitorQueue.get()
			if self.TC == None:
				try:
					self.TC = tc.Trinamic_control()
				except Exception, e:
					self.error_stream('Could not create motor controller object')
					self.set_state(PyTango.DevState.FAULT)
					self.set_status('Failed to create motor controller object.')
					PyTango.Except.throw_exception('Motor controller object creation fail',
												str(e), 'monitorThread', PyTango.ErrSeverity.ERR)
						
			if task == 'connect':				
				self.connectHardware()			
				try:
					self.setupMotors()
					self.startHardwareThread()
					self.set_state(PyTango.DevState.ON)
					self.set_status('Connected to motor controller')
				except Exception, e:
					self.error_stream('Could not communicate with motor controller')
					self.set_state(PyTango.DevState.FAULT)
					self.set_status('Failed to communicate with motor controller.')
					PyTango.Except.throw_exception('Motor controller connection fail',
												str(e), 'monitorThread', PyTango.ErrSeverity.ERR)
			elif task == 'disconnect':
				self.disconnectHardware() 
				
			elif task == 'exit':
				self.disconnectHardware()


	def disconnectHardware(self):
		# Stop the hardware reading thread. Pass on the exception if was not started
		self.stopHardwareThread()
		# Disconnect from the trinamic card
		self.TC.close()
		self.set_state(PyTango.DevState.UNKNOWN)
		self.set_status('Disconnected from motor controller')


	def connectHardware(self):
		# Stop the hardware reading thread. Pass on the exception if was not started
		self.stopHardwareThread()
		
		# Disconnect from the trinamic card
		try:
			self.TC.close()
		except Exception, e:
			pass
						
		# We assume that the correct baudrate is already set so try that first
		try:
			print 'Connecting at 38400...'
			self.TC.connectRS232(self.Port, 38400)
		except Exception, e:
			self.error_stream('Could not connect')
			self.set_state(PyTango.DevState.UNKNOWN)
			self.set_status('Failed to connect.')
			try:
				br=self.TC.getBaudrate()
				print 'Baudrate:',br
			except Exception, e:
				# Next try 9600 baud, this is the factory default
				try:
					self.TC.close()
				except:
					pass
				print 'Connecting at 9600...'
				self.TC.connectRS232(self.Port, 9600)
				try:
					br=self.TC.getBaudrate()
					print 'Baudrate:',br
				except Exception, e:
					# If that also fails we have to do a factory reset.
					self.set_state(PyTango.DevState.UNKNOWN)
					self.set_status('Failed to connect to motor controller. Connection problem or factory reset needed.')
					PyTango.Except.throw_exception('Failed to connect to motor controller. Connection problem or factory reset needed.',
												str(e), 'monitorThread', PyTango.ErrSeverity.ERR)
					raise
				# If that works, we try to set to 38400
				try:
					print 'Set new baudrate to 38400'
					self.TC.setBaudrate(38400)
					br=self.TC.getBaudrate()
					print 'Baudrate:',br
				except Exception, e:
					# If that also fails we have to do a factory reset.
					self.set_state(PyTango.DevState.FAULT)
					self.set_status('Failed to set 38400 baudrate. Factory reset needed.')
					PyTango.Except.throw_exception('Failed to 38400 baudrate. Factory reset needed.',
												str(e), 'monitorThread', PyTango.ErrSeverity.ERR)
					
					raise


	def startHardwareThread(self):
		self.stopHardwareThread()
		self.hardwareThread = threading.Thread()
		threading.Thread.__init__(self.hardwareThread, target=self.readHardware)
		self.hardwareThread.start()
		self.info_stream('readHardware thread started.')


	def stopHardwareThread(self):
		print 'Stopping thread...'
		self.stopHardwareThreadFlag = True
		try:
			if self.hardwareThread.isAlive() == True:
				print 'It was alive.'
				self.hardwareThread.join(3)
		except AttributeError:
			pass
		print 'Now stopped.'
		self.stopHardwareThreadFlag = False


	def readHardware(self):
		sleepTime = self.hardwarePollingPeriod / 5 / 6
		print 'Sleeptime:', sleepTime
		while not self.stopHardwareThreadFlag:
			if (self.get_state() == PyTango.DevState.ON or self.get_state() == PyTango.DevState.ALARM or 
				self.get_state() == PyTango.DevState.MOVING):
				try:
					moving = False
					for i in range(6):
						self.hardwareLock.acquire()
						self.actualPositions[i] = np.double(self.TC.getActualPosition(i)) / self.microstepResolutions[i]
						self.hardwareLock.release()
						time.sleep(sleepTime)
		
						self.hardwareLock.acquire()
						speed = self.TC.getActualSpeed(i)
						self.hardwareLock.release()					
						self.actualSpeeds[i] = speed * 16e6 / 65536 / 2 ** self.pulseDivisors[i] / self.microstepResolutions[i]
						time.sleep(sleepTime)
						
						self.hardwareLock.acquire()
						self.limitSwitches0[i] = self.TC.getLeftLimitSwitch(i)
						self.hardwareLock.release()
						time.sleep(sleepTime)
						
						self.hardwareLock.acquire()
						self.limitSwitches1[i] = self.TC.getRightLimitSwitch(i)
						self.hardwareLock.release()
						time.sleep(sleepTime)
		
						self.hardwareLock.acquire()
						if self.TC.getTargetPositionReached(i) == False:
							moving = True
						self.hardwareLock.release()
						time.sleep(sleepTime)
	
					if moving == True:
						self.set_state(PyTango.DevState.MOVING)
						self.set_status('Motor(s) moving')
					else:
						self.set_state(PyTango.DevState.ON)
						self.set_status('Connected to motor controller')
				except Exception, e:
					self.set_state(PyTango.DevState.FAULT)
					self.set_status('Error reading hardware.')
					PyTango.Except.throw_exception('Error reading hardware',str(e),'readHardware thread')
			else:
				time.sleep(sleepTime * 5)


	def setupMotors(self):
		attrs = self.get_device_attr()
		for i in range(6):
			self.hardwareLock.acquire()
			mc = attrs.get_w_attr_by_name(''.join(('MaxCurrentM', str(i)))).get_write_value()
			self.maxCurrents[i] = mc			
			self.TC.setMaxCurrent(self.maxCurrents[i], i)
			self.hardwareLock.release()
			lp = attrs.get_w_attr_by_name(''.join(('LimitSwitchPolarityM', str(i)))).get_write_value()
			self.limitSwitchPolarity[i] = lp
			self.setLimitSwitchPolarity(lp, i)
			mr = attrs.get_w_attr_by_name(''.join(('MicrostepResolutionM', str(i)))).get_write_value()
			self.microstepResolutions[i] = mr
			self.setMotorMicrostepResolution(mr, i)
			acc = attrs.get_w_attr_by_name(''.join(('AccelerationM', str(i)))).get_write_value()	
			self.accelerations[i] = acc
			spd = attrs.get_w_attr_by_name(''.join(('SpeedM', str(i)))).get_write_value()
			self.targetSpeeds[i] = spd
			self.setMotorSpeed(spd, i)	# Acceleration is also set in this command


	def setMotorSpeed(self, speed, motor):
		# data is in full steps per second.
		# TMCL speed is in usteps / s, so scale the value
		# then find the highest pulse divisor to maximize the resolution
		# 16e6/65536 is the speed unit, 2047 speed units at max speed
		if speed == None:
			speed = 0
		uspeed = speed * self.microstepResolutions[motor] # microstep speed			
		if speed == 0:
			pd = 7
		else:			
			pd = np.floor(np.log2(16e6 / 65536 * 2047 / uspeed))
		if pd > 11:
			pd = 10
		elif pd < 0:
			pd = 0
		tspeed = np.floor(uspeed / (16e6 / 65536 / 2 ** pd))
		if tspeed < 2048:
			self.targetSpeeds[motor] = speed
			self.pulseDivisors[motor] = pd
			self.hardwareLock.acquire()
			self.TC.setPulseDivisor(pd, motor)
			self.TC.setTargetSpeed(tspeed, motor)
			self.hardwareLock.release()
			# We need to recalculate the acceleration when setting speed
			# due to dependence on pulse divisor
			self.setMotorAcceleration(self.accelerations[motor], motor)
		else:
			self.error_stream('Speed too high.')
			PyTango.Except.throw_exception('Speed too high', ''.join(('Speed too high: Div ', str(pd), ', Speed ', str(tspeed)))
											, 'setMotorSpeed', PyTango.ErrSeverity.WARN)


	def setMotorAcceleration(self, acceleration, motor):
		if self.microstepResolutions[motor] > 0:
			ms = np.log2(self.microstepResolutions[motor])
		else:
			ms = 0
		pd = self.pulseDivisors[motor]	
		if acceleration < 0:		
			self.error_stream('Acceleration negative.')
			PyTango.Except.throw_exception('Acceleration negative.', ''.join(('Acceleration negative: Acc ', str(acceleration)))
											, 'setMotorAcceleration', PyTango.ErrSeverity.WARN)
		else:
			if acceleration == 0:
				rd = pd
			else:
				rd = np.floor(np.log2(6e6 ** 2 * 1023 / (2 ** ms * 2 ** pd * acceleration)) - 29)
			if rd > 13:
				rd = 13
			elif rd < 0:
				rd = 0
			acc = np.round(acceleration / (16e6 ** 2 / (2 ** (ms + pd + rd + 29))))
			if acc < 2048:
				self.accelerations[motor] = acceleration
				self.hardwareLock.acquire()
				self.TC.setRampDivisor(rd, motor)
				self.TC.setAcceleration(acc, motor)
				self.hardwareLock.release()
			else:
				acc = 2047
				self.accelerations[motor] = acc * 16e6 ** 2 / (2 ** (pd + rd + 29))
				self.hardwareLock.acquire()
				self.TC.setRampDivisor(rd, motor)
				self.TC.setAcceleration(acc, motor)
				self.hardwareLock.release()


	def setMotorMicrostepResolution(self, microstepResolution, motor):
		if microstepResolution == 0:
			microstepResolution = 1
		if microstepResolution < 1:
			self.error_stream('Microstep resolution negative.')
			PyTango.Except.throw_exception('Microstep resolution negative.', ''.join(('Microstep resolution negative: MR ', str(microstepResolution)))
											, 'setMotorMicrostepResolution', PyTango.ErrSeverity.WARN)
		elif microstepResolution > 64:
			self.error_stream('Microstep resolution too high (>64).')
			PyTango.Except.throw_exception('Microstep resolution too high.', ''.join(('Microstep resolution too high (>64): MR ', str(microstepResolution)))
											, 'setMotorMicrostepResolution', PyTango.ErrSeverity.WARN)
		else:
			mr = int(2 ** np.floor(np.log2(microstepResolution)))
			oldMr = self.microstepResolutions[motor]
			if oldMr not in range(1, 65):
				oldMr = 1
			self.microstepResolutions[motor] = mr
			self.hardwareLock.acquire()
			pos = self.TC.getActualPosition(motor)
			self.TC.setMicrostepResolution(mr, motor)
			self.TC.definePosition(round(pos * mr / oldMr), motor)
			self.hardwareLock.release()
			self.setMotorSpeed(self.targetSpeeds[motor], motor)


	def setMotorPosition(self, position, motor):
		self.hardwareLock.acquire()
		self.targetPositions[motor] = position
		self.TC.setTargetPosition(np.round(position * self.microstepResolutions[motor]), motor)
		self.hardwareLock.release()


	def setMaxCurrent(self, maxCurrent, motor):
		if maxCurrent > 1.5:
			PyTango.Except.throw_exception('Current too high', ''.join(('Max current must be below 1.5 A, motor ', str(motor))),
										'setMaxCurrent', PyTango.ErrSeverity.WARN)
			maxCurrent = 1.5
		elif maxCurrent < 0:
			PyTango.Except.throw_exception('Current too low', ''.join(('Max current must be positive, motor ', str(motor))),
										'setMaxCurrent', PyTango.ErrSeverity.WARN)
			maxCurrent = 0.0
		self.maxCurrents[motor] = maxCurrent
		self.hardwareLock.acquire()
		self.TC.setMaxCurrent(maxCurrent, motor)
		self.hardwareLock.release()


	def setLimitSwitchPolarity(self, polarity, motor):
		if polarity == 1 or polarity == True:
			self.limitSwitchPolarity[motor] = 1
		else:
			self.limitSwitchPolarity[motor] = 0
		self.hardwareLock.acquire()
		self.TC.setLimitSwitchPolarity(self.limitSwitchPolarity[motor], motor)
		self.hardwareLock.release()

#==================================================================
#
#	Trinamic_TMCM610_DS2 read/write attribute methods
#
#==================================================================
#------------------------------------------------------------------
#	Read Attribute Hardware
#------------------------------------------------------------------
	def read_attr_hardware(self,data):
#		print "In ", self.get_name(), "::read_attr_hardware()"
		pass



#------------------------------------------------------------------
#	Read MaxCurrentM0 attribute
#------------------------------------------------------------------
	def read_MaxCurrentM0(self, attr):
		print "In ", self.get_name(), "::read_MaxCurrentM0()"
		
		#	Add your own code here
		
		attr_MaxCurrentM0_read = self.maxCurrents[0]
		attr.set_value(attr_MaxCurrentM0_read)


#------------------------------------------------------------------
#	Write MaxCurrentM0 attribute
#------------------------------------------------------------------
	def write_MaxCurrentM0(self, attr):
		print "In ", self.get_name(), "::write_MaxCurrentM0()"
		data = attr.get_write_value()
		
		print "Attribute value = ", data

		#	Add your own code here
		self.setMaxCurrent(data, 0)


#------------------------------------------------------------------
#	Read MaxCurrentM1 attribute
#------------------------------------------------------------------
	def read_MaxCurrentM1(self, attr):
		print "In ", self.get_name(), "::read_MaxCurrentM1()"
		
		#	Add your own code here
		
		attr_MaxCurrentM1_read = self.maxCurrents[1]
		attr.set_value(attr_MaxCurrentM1_read)


#------------------------------------------------------------------
#	Write MaxCurrentM1 attribute
#------------------------------------------------------------------
	def write_MaxCurrentM1(self, attr):
		print "In ", self.get_name(), "::write_MaxCurrentM1()"
		data = attr.get_write_value()
		
		print "Attribute value = ", data

		#	Add your own code here
		self.setMaxCurrent(data, 1)


#------------------------------------------------------------------
#	Read MaxCurrentM2 attribute
#------------------------------------------------------------------
	def read_MaxCurrentM2(self, attr):
		print "In ", self.get_name(), "::read_MaxCurrentM2()"
		
		#	Add your own code here
		
		attr_MaxCurrentM2_read = self.maxCurrents[2]
		attr.set_value(attr_MaxCurrentM2_read)


#------------------------------------------------------------------
#	Write MaxCurrentM2 attribute
#------------------------------------------------------------------
	def write_MaxCurrentM2(self, attr):
		print "In ", self.get_name(), "::write_MaxCurrentM2()"
		data = attr.get_write_value()
		
		print "Attribute value = ", data

		#	Add your own code here
		self.setMaxCurrent(data, 2)


#------------------------------------------------------------------
#	Read MaxCurrentM3 attribute
#------------------------------------------------------------------
	def read_MaxCurrentM3(self, attr):
		print "In ", self.get_name(), "::read_MaxCurrentM3()"
		
		#	Add your own code here
		
		attr_MaxCurrentM3_read = self.maxCurrents[3]
		attr.set_value(attr_MaxCurrentM3_read)


#------------------------------------------------------------------
#	Write MaxCurrentM3 attribute
#------------------------------------------------------------------
	def write_MaxCurrentM3(self, attr):
		print "In ", self.get_name(), "::write_MaxCurrentM3()"
		data = attr.get_write_value()
		
		print "Attribute value = ", data

		#	Add your own code here
		self.setMaxCurrent(data, 3)


#------------------------------------------------------------------
#	Read MaxCurrentM4 attribute
#------------------------------------------------------------------
	def read_MaxCurrentM4(self, attr):
		print "In ", self.get_name(), "::read_MaxCurrentM4()"
		
		#	Add your own code here
		
		attr_MaxCurrentM4_read = self.maxCurrents[4]
		attr.set_value(attr_MaxCurrentM4_read)


#------------------------------------------------------------------
#	Write MaxCurrentM4 attribute
#------------------------------------------------------------------
	def write_MaxCurrentM4(self, attr):
		print "In ", self.get_name(), "::write_MaxCurrentM4()"
		data = attr.get_write_value()
		
		print "Attribute value = ", data

		#	Add your own code here
		self.setMaxCurrent(data, 4)


#------------------------------------------------------------------
#	Read MaxCurrentM5 attribute
#------------------------------------------------------------------
	def read_MaxCurrentM5(self, attr):
		print "In ", self.get_name(), "::read_MaxCurrentM5()"
		
		#	Add your own code here
		
		attr_MaxCurrentM5_read = self.maxCurrents[5]
		attr.set_value(attr_MaxCurrentM5_read)


#------------------------------------------------------------------
#	Write MaxCurrentM5 attribute
#------------------------------------------------------------------
	def write_MaxCurrentM5(self, attr):
		print "In ", self.get_name(), "::write_MaxCurrentM5()"
		data = attr.get_write_value()
		
		print "Attribute value = ", data

		#	Add your own code here
		self.setMaxCurrent(data, 5)


#------------------------------------------------------------------
#	Read AccelerationM0 attribute
#------------------------------------------------------------------
	def read_AccelerationM0(self, attr):
		print "In ", self.get_name(), "::read_AccelerationM0()"
		
		#	Add your own code here
		
		attr_AccelerationM0_read = self.accelerations[0]
		attr.set_value(attr_AccelerationM0_read)


#------------------------------------------------------------------
#	Write AccelerationM0 attribute
#------------------------------------------------------------------
	def write_AccelerationM0(self, attr):
		print "In ", self.get_name(), "::write_AccelerationM0()"
		data = attr.get_write_value()
		
		print "Attribute value = ", data

		#	Add your own code here
		self.setMotorAcceleration(data, 0)


#---- AccelerationM0 attribute State Machine -----------------
	def is_AccelerationM0_allowed(self, req_type):
		if self.get_state() in [PyTango.DevState.UNKNOWN]:
			#	End of Generated Code
			#	Re-Start of Generated Code
			return False
		return True


#------------------------------------------------------------------
#	Read AccelerationM1 attribute
#------------------------------------------------------------------
	def read_AccelerationM1(self, attr):
		print "In ", self.get_name(), "::read_AccelerationM1()"
		
		#	Add your own code here
		
		attr_AccelerationM1_read = self.accelerations[1]
		attr.set_value(attr_AccelerationM1_read)


#------------------------------------------------------------------
#	Write AccelerationM1 attribute
#------------------------------------------------------------------
	def write_AccelerationM1(self, attr):
		print "In ", self.get_name(), "::write_AccelerationM1()"
		data = attr.get_write_value()
		
		print "Attribute value = ", data

		#	Add your own code here
		self.setMotorAcceleration(data, 1)


#---- AccelerationM1 attribute State Machine -----------------
	def is_AccelerationM1_allowed(self, req_type):
		if self.get_state() in [PyTango.DevState.UNKNOWN]:
			#	End of Generated Code
			#	Re-Start of Generated Code
			return False
		return True


#------------------------------------------------------------------
#	Read AccelerationM2 attribute
#------------------------------------------------------------------
	def read_AccelerationM2(self, attr):
		print "In ", self.get_name(), "::read_AccelerationM2()"
		
		#	Add your own code here
		
		attr_AccelerationM2_read = self.accelerations[2]
		attr.set_value(attr_AccelerationM2_read)


#------------------------------------------------------------------
#	Write AccelerationM2 attribute
#------------------------------------------------------------------
	def write_AccelerationM2(self, attr):
		print "In ", self.get_name(), "::write_AccelerationM2()"
		data = attr.get_write_value()
		
		print "Attribute value = ", data

		#	Add your own code here
		self.setMotorAcceleration(data, 2)


#---- AccelerationM2 attribute State Machine -----------------
	def is_AccelerationM2_allowed(self, req_type):
		if self.get_state() in [PyTango.DevState.UNKNOWN]:
			#	End of Generated Code
			#	Re-Start of Generated Code
			return False
		return True


#------------------------------------------------------------------
#	Read AccelerationM3 attribute
#------------------------------------------------------------------
	def read_AccelerationM3(self, attr):
		print "In ", self.get_name(), "::read_AccelerationM3()"
		
		#	Add your own code here
		
		attr_AccelerationM3_read = self.accelerations[3]
		attr.set_value(attr_AccelerationM3_read)


#------------------------------------------------------------------
#	Write AccelerationM3 attribute
#------------------------------------------------------------------
	def write_AccelerationM3(self, attr):
		print "In ", self.get_name(), "::write_AccelerationM3()"
		data = attr.get_write_value()
		
		print "Attribute value = ", data

		#	Add your own code here
		self.setMotorAcceleration(data, 3)


#---- AccelerationM3 attribute State Machine -----------------
	def is_AccelerationM3_allowed(self, req_type):
		if self.get_state() in [PyTango.DevState.UNKNOWN]:
			#	End of Generated Code
			#	Re-Start of Generated Code
			return False
		return True


#------------------------------------------------------------------
#	Read AccelerationM4 attribute
#------------------------------------------------------------------
	def read_AccelerationM4(self, attr):
		print "In ", self.get_name(), "::read_AccelerationM4()"
		
		#	Add your own code here
		
		attr_AccelerationM4_read = self.accelerations[4]
		attr.set_value(attr_AccelerationM4_read)


#------------------------------------------------------------------
#	Write AccelerationM4 attribute
#------------------------------------------------------------------
	def write_AccelerationM4(self, attr):
		print "In ", self.get_name(), "::write_AccelerationM4()"
		data = attr.get_write_value()
		
		print "Attribute value = ", data

		#	Add your own code here
		self.setMotorAcceleration(data, 4)


#---- AccelerationM4 attribute State Machine -----------------
	def is_AccelerationM4_allowed(self, req_type):
		if self.get_state() in [PyTango.DevState.UNKNOWN]:
			#	End of Generated Code
			#	Re-Start of Generated Code
			return False
		return True


#------------------------------------------------------------------
#	Read AccelerationM5 attribute
#------------------------------------------------------------------
	def read_AccelerationM5(self, attr):
		print "In ", self.get_name(), "::read_AccelerationM5()"
		
		#	Add your own code here
		
		attr_AccelerationM5_read = self.accelerations[5]
		attr.set_value(attr_AccelerationM5_read)


#------------------------------------------------------------------
#	Write AccelerationM5 attribute
#------------------------------------------------------------------
	def write_AccelerationM5(self, attr):
		print "In ", self.get_name(), "::write_AccelerationM5()"
		data = attr.get_write_value()
		
		print "Attribute value = ", data

		#	Add your own code here
		self.setMotorAcceleration(data, 5)


#---- AccelerationM5 attribute State Machine -----------------
	def is_AccelerationM5_allowed(self, req_type):
		if self.get_state() in [PyTango.DevState.UNKNOWN]:
			#	End of Generated Code
			#	Re-Start of Generated Code
			return False
		return True


#------------------------------------------------------------------
#	Read MicrostepResolutionM0 attribute
#------------------------------------------------------------------
	def read_MicrostepResolutionM0(self, attr):
		print "In ", self.get_name(), "::read_MicrostepResolutionM0()"
		
		#	Add your own code here
		
		attr_MicrostepResolutionM0_read = self.microstepResolutions[0]
		attr.set_value(attr_MicrostepResolutionM0_read)


#------------------------------------------------------------------
#	Write MicrostepResolutionM0 attribute
#------------------------------------------------------------------
	def write_MicrostepResolutionM0(self, attr):
		print "In ", self.get_name(), "::write_MicrostepResolutionM0()"
		data = attr.get_write_value()
		
		print "Attribute value = ", data

		#	Add your own code here
		self.setMotorMicrostepResolution(data, 0)


#---- MicrostepResolutionM0 attribute State Machine -----------------
	def is_MicrostepResolutionM0_allowed(self, req_type):
		if self.get_state() in [PyTango.DevState.UNKNOWN]:
			#	End of Generated Code
			#	Re-Start of Generated Code
			return False
		return True


#------------------------------------------------------------------
#	Read MicrostepResolutionM1 attribute
#------------------------------------------------------------------
	def read_MicrostepResolutionM1(self, attr):
		print "In ", self.get_name(), "::read_MicrostepResolutionM1()"
		
		#	Add your own code here
		
		attr_MicrostepResolutionM1_read = self.microstepResolutions[1]
		attr.set_value(attr_MicrostepResolutionM1_read)


#------------------------------------------------------------------
#	Write MicrostepResolutionM1 attribute
#------------------------------------------------------------------
	def write_MicrostepResolutionM1(self, attr):
		print "In ", self.get_name(), "::write_MicrostepResolutionM1()"
		data = attr.get_write_value()
		
		print "Attribute value = ", data

		#	Add your own code here
		self.setMotorMicrostepResolution(data, 1)


#---- MicrostepResolutionM1 attribute State Machine -----------------
	def is_MicrostepResolutionM1_allowed(self, req_type):
		if self.get_state() in [PyTango.DevState.UNKNOWN]:
			#	End of Generated Code
			#	Re-Start of Generated Code
			return False
		return True


#------------------------------------------------------------------
#	Read MicrostepResolutionM2 attribute
#------------------------------------------------------------------
	def read_MicrostepResolutionM2(self, attr):
		print "In ", self.get_name(), "::read_MicrostepResolutionM2()"
		
		#	Add your own code here
		
		attr_MicrostepResolutionM2_read = self.microstepResolutions[2]
		attr.set_value(attr_MicrostepResolutionM2_read)


#------------------------------------------------------------------
#	Write MicrostepResolutionM2 attribute
#------------------------------------------------------------------
	def write_MicrostepResolutionM2(self, attr):
		print "In ", self.get_name(), "::write_MicrostepResolutionM2()"
		data = attr.get_write_value()
		
		print "Attribute value = ", data

		#	Add your own code here
		self.setMotorMicrostepResolution(data, 2)


#---- MicrostepResolutionM2 attribute State Machine -----------------
	def is_MicrostepResolutionM2_allowed(self, req_type):
		if self.get_state() in [PyTango.DevState.UNKNOWN]:
			#	End of Generated Code
			#	Re-Start of Generated Code
			return False
		return True


#------------------------------------------------------------------
#	Read MicrostepResolutionM3 attribute
#------------------------------------------------------------------
	def read_MicrostepResolutionM3(self, attr):
		print "In ", self.get_name(), "::read_MicrostepResolutionM3()"
		
		#	Add your own code here
		
		attr_MicrostepResolutionM3_read = self.microstepResolutions[3]
		attr.set_value(attr_MicrostepResolutionM3_read)


#------------------------------------------------------------------
#	Write MicrostepResolutionM3 attribute
#------------------------------------------------------------------
	def write_MicrostepResolutionM3(self, attr):
		print "In ", self.get_name(), "::write_MicrostepResolutionM3()"
		data = attr.get_write_value()
		
		print "Attribute value = ", data

		#	Add your own code here
		self.setMotorMicrostepResolution(data, 3)


#---- MicrostepResolutionM3 attribute State Machine -----------------
	def is_MicrostepResolutionM3_allowed(self, req_type):
		if self.get_state() in [PyTango.DevState.UNKNOWN]:
			#	End of Generated Code
			#	Re-Start of Generated Code
			return False
		return True


#------------------------------------------------------------------
#	Read MicrostepResolutionM4 attribute
#------------------------------------------------------------------
	def read_MicrostepResolutionM4(self, attr):
		print "In ", self.get_name(), "::read_MicrostepResolutionM4()"
		
		#	Add your own code here
		
		attr_MicrostepResolutionM4_read = self.microstepResolutions[4]
		attr.set_value(attr_MicrostepResolutionM4_read)


#------------------------------------------------------------------
#	Write MicrostepResolutionM4 attribute
#------------------------------------------------------------------
	def write_MicrostepResolutionM4(self, attr):
		print "In ", self.get_name(), "::write_MicrostepResolutionM4()"
		data = attr.get_write_value()
		
		print "Attribute value = ", data

		#	Add your own code here
		self.setMotorMicrostepResolution(data, 4)


#---- MicrostepResolutionM4 attribute State Machine -----------------
	def is_MicrostepResolutionM4_allowed(self, req_type):
		if self.get_state() in [PyTango.DevState.UNKNOWN]:
			#	End of Generated Code
			#	Re-Start of Generated Code
			return False
		return True


#------------------------------------------------------------------
#	Read MicrostepResolutionM5 attribute
#------------------------------------------------------------------
	def read_MicrostepResolutionM5(self, attr):
		print "In ", self.get_name(), "::read_MicrostepResolutionM5()"
		
		#	Add your own code here
		
		attr_MicrostepResolutionM5_read = self.microstepResolutions[5]
		attr.set_value(attr_MicrostepResolutionM5_read)


#------------------------------------------------------------------
#	Write MicrostepResolutionM5 attribute
#------------------------------------------------------------------
	def write_MicrostepResolutionM5(self, attr):
		print "In ", self.get_name(), "::write_MicrostepResolutionM5()"
		data = attr.get_write_value()
		
		print "Attribute value = ", data

		#	Add your own code here
		self.setMotorMicrostepResolution(data, 5)


#---- MicrostepResolutionM5 attribute State Machine -----------------
	def is_MicrostepResolutionM5_allowed(self, req_type):
		if self.get_state() in [PyTango.DevState.UNKNOWN]:
			#	End of Generated Code
			#	Re-Start of Generated Code
			return False
		return True


#------------------------------------------------------------------
#	Read LimitSwitchPolarityM0 attribute
#------------------------------------------------------------------
	def read_LimitSwitchPolarityM0(self, attr):
		print "In ", self.get_name(), "::read_LimitSwitchPolarityM0()"
		
		#	Add your own code here
		
		attr_LimitSwitchPolarityM0_read = self.limitSwitchPolarity[0]
		attr.set_value(attr_LimitSwitchPolarityM0_read)


#------------------------------------------------------------------
#	Write LimitSwitchPolarityM0 attribute
#------------------------------------------------------------------
	def write_LimitSwitchPolarityM0(self, attr):
		print "In ", self.get_name(), "::write_LimitSwitchPolarityM0()"
		data = attr.get_write_value()
		
		print "Attribute value = ", data

		#	Add your own code here
		self.setLimitSwitchPolarity(data, 0)


#---- LimitSwitchPolarityM0 attribute State Machine -----------------
	def is_LimitSwitchPolarityM0_allowed(self, req_type):
		if self.get_state() in [PyTango.DevState.UNKNOWN]:
			#	End of Generated Code
			#	Re-Start of Generated Code
			return False
		return True


#------------------------------------------------------------------
#	Read LimitSwitchPolarityM1 attribute
#------------------------------------------------------------------
	def read_LimitSwitchPolarityM1(self, attr):
		print "In ", self.get_name(), "::read_LimitSwitchPolarityM1()"
		
		#	Add your own code here
		
		attr_LimitSwitchPolarityM1_read = self.limitSwitchPolarity[1]
		attr.set_value(attr_LimitSwitchPolarityM1_read)


#------------------------------------------------------------------
#	Write LimitSwitchPolarityM1 attribute
#------------------------------------------------------------------
	def write_LimitSwitchPolarityM1(self, attr):
		print "In ", self.get_name(), "::write_LimitSwitchPolarityM1()"
		data = attr.get_write_value()
		
		print "Attribute value = ", data

		#	Add your own code here
		self.setLimitSwitchPolarity(data, 1)


#---- LimitSwitchPolarityM1 attribute State Machine -----------------
	def is_LimitSwitchPolarityM1_allowed(self, req_type):
		if self.get_state() in [PyTango.DevState.UNKNOWN]:
			#	End of Generated Code
			#	Re-Start of Generated Code
			return False
		return True


#------------------------------------------------------------------
#	Read LimitSwitchPolarityM2 attribute
#------------------------------------------------------------------
	def read_LimitSwitchPolarityM2(self, attr):
		print "In ", self.get_name(), "::read_LimitSwitchPolarityM2()"
		
		#	Add your own code here
		
		attr_LimitSwitchPolarityM2_read = self.limitSwitchPolarity[2]
		attr.set_value(attr_LimitSwitchPolarityM2_read)


#------------------------------------------------------------------
#	Write LimitSwitchPolarityM2 attribute
#------------------------------------------------------------------
	def write_LimitSwitchPolarityM2(self, attr):
		print "In ", self.get_name(), "::write_LimitSwitchPolarityM2()"
		data = attr.get_write_value()
		
		print "Attribute value = ", data

		#	Add your own code here
		self.setLimitSwitchPolarity(data, 2)


#---- LimitSwitchPolarityM2 attribute State Machine -----------------
	def is_LimitSwitchPolarityM2_allowed(self, req_type):
		if self.get_state() in [PyTango.DevState.UNKNOWN]:
			#	End of Generated Code
			#	Re-Start of Generated Code
			return False
		return True


#------------------------------------------------------------------
#	Read LimitSwitchPolarityM3 attribute
#------------------------------------------------------------------
	def read_LimitSwitchPolarityM3(self, attr):
		print "In ", self.get_name(), "::read_LimitSwitchPolarityM3()"
		
		#	Add your own code here
		
		attr_LimitSwitchPolarityM3_read = self.limitSwitchPolarity[3]
		attr.set_value(attr_LimitSwitchPolarityM3_read)


#------------------------------------------------------------------
#	Write LimitSwitchPolarityM3 attribute
#------------------------------------------------------------------
	def write_LimitSwitchPolarityM3(self, attr):
		print "In ", self.get_name(), "::write_LimitSwitchPolarityM3()"
		data = attr.get_write_value()
		
		print "Attribute value = ", data

		#	Add your own code here
		self.setLimitSwitchPolarity(data, 3)


#---- LimitSwitchPolarityM3 attribute State Machine -----------------
	def is_LimitSwitchPolarityM3_allowed(self, req_type):
		if self.get_state() in [PyTango.DevState.UNKNOWN]:
			#	End of Generated Code
			#	Re-Start of Generated Code
			return False
		return True


#------------------------------------------------------------------
#	Read LimitSwitchPolarityM4 attribute
#------------------------------------------------------------------
	def read_LimitSwitchPolarityM4(self, attr):
		print "In ", self.get_name(), "::read_LimitSwitchPolarityM4()"
		
		#	Add your own code here
		
		attr_LimitSwitchPolarityM4_read = self.limitSwitchPolarity[4]
		attr.set_value(attr_LimitSwitchPolarityM4_read)


#------------------------------------------------------------------
#	Write LimitSwitchPolarityM4 attribute
#------------------------------------------------------------------
	def write_LimitSwitchPolarityM4(self, attr):
		print "In ", self.get_name(), "::write_LimitSwitchPolarityM4()"
		data = attr.get_write_value()
		
		print "Attribute value = ", data

		#	Add your own code here
		self.setLimitSwitchPolarity(data, 4)


#---- LimitSwitchPolarityM4 attribute State Machine -----------------
	def is_LimitSwitchPolarityM4_allowed(self, req_type):
		if self.get_state() in [PyTango.DevState.UNKNOWN]:
			#	End of Generated Code
			#	Re-Start of Generated Code
			return False
		return True


#------------------------------------------------------------------
#	Read LimitSwitchPolarityM5 attribute
#------------------------------------------------------------------
	def read_LimitSwitchPolarityM5(self, attr):
		print "In ", self.get_name(), "::read_LimitSwitchPolarityM5()"
		
		#	Add your own code here
		
		attr_LimitSwitchPolarityM5_read = self.limitSwitchPolarity[5]
		attr.set_value(attr_LimitSwitchPolarityM5_read)


#------------------------------------------------------------------
#	Write LimitSwitchPolarityM5 attribute
#------------------------------------------------------------------
	def write_LimitSwitchPolarityM5(self, attr):
		print "In ", self.get_name(), "::write_LimitSwitchPolarityM5()"
		data = attr.get_write_value()
		
		print "Attribute value = ", data

		#	Add your own code here
		self.setLimitSwitchPolarity(data, 5)


#---- LimitSwitchPolarityM5 attribute State Machine -----------------
	def is_LimitSwitchPolarityM5_allowed(self, req_type):
		if self.get_state() in [PyTango.DevState.UNKNOWN]:
			#	End of Generated Code
			#	Re-Start of Generated Code
			return False
		return True


#------------------------------------------------------------------
#	Read SpeedM0 attribute
#------------------------------------------------------------------
	def read_SpeedM0(self, attr):
		print "In ", self.get_name(), "::read_SpeedM0()"
		
		#	Add your own code here
		
		attr_SpeedM0_read = self.actualSpeeds[0]
		attr.set_value(attr_SpeedM0_read)


#------------------------------------------------------------------
#	Write SpeedM0 attribute
#------------------------------------------------------------------
	def write_SpeedM0(self, attr):
		print "In ", self.get_name(), "::write_SpeedM0()"
		data = attr.get_write_value()
		
		print "Attribute value = ", data

		#	Add your own code here
		self.setMotorSpeed(data, 0)


#---- SpeedM0 attribute State Machine -----------------
	def is_SpeedM0_allowed(self, req_type):
		if self.get_state() in [PyTango.DevState.UNKNOWN]:
			#	End of Generated Code
			#	Re-Start of Generated Code
			return False
		return True


#------------------------------------------------------------------
#	Read SpeedM1 attribute
#------------------------------------------------------------------
	def read_SpeedM1(self, attr):
		print "In ", self.get_name(), "::read_SpeedM1()"
		
		#	Add your own code here
		
		attr_SpeedM1_read = self.actualSpeeds[1]
		attr.set_value(attr_SpeedM1_read)


#------------------------------------------------------------------
#	Write SpeedM1 attribute
#------------------------------------------------------------------
	def write_SpeedM1(self, attr):
		print "In ", self.get_name(), "::write_SpeedM1()"
		data = attr.get_write_value()
		
		print "Attribute value = ", data

		#	Add your own code here
		self.setMotorSpeed(data, 1)


#---- SpeedM1 attribute State Machine -----------------
	def is_SpeedM1_allowed(self, req_type):
		if self.get_state() in [PyTango.DevState.UNKNOWN]:
			#	End of Generated Code
			#	Re-Start of Generated Code
			return False
		return True


#------------------------------------------------------------------
#	Read SpeedM2 attribute
#------------------------------------------------------------------
	def read_SpeedM2(self, attr):
		print "In ", self.get_name(), "::read_SpeedM2()"
		
		#	Add your own code here
		
		attr_SpeedM2_read = self.actualSpeeds[2]
		attr.set_value(attr_SpeedM2_read)


#------------------------------------------------------------------
#	Write SpeedM2 attribute
#------------------------------------------------------------------
	def write_SpeedM2(self, attr):
		print "In ", self.get_name(), "::write_SpeedM2()"
		data = attr.get_write_value()
		
		print "Attribute value = ", data

		#	Add your own code here
		self.setMotorSpeed(data, 2)


#---- SpeedM2 attribute State Machine -----------------
	def is_SpeedM2_allowed(self, req_type):
		if self.get_state() in [PyTango.DevState.UNKNOWN]:
			#	End of Generated Code
			#	Re-Start of Generated Code
			return False
		return True


#------------------------------------------------------------------
#	Read SpeedM3 attribute
#------------------------------------------------------------------
	def read_SpeedM3(self, attr):
		print "In ", self.get_name(), "::read_SpeedM3()"
		
		#	Add your own code here
		
		attr_SpeedM3_read = self.actualSpeeds[3]
		attr.set_value(attr_SpeedM3_read)


#------------------------------------------------------------------
#	Write SpeedM3 attribute
#------------------------------------------------------------------
	def write_SpeedM3(self, attr):
		print "In ", self.get_name(), "::write_SpeedM3()"
		data = attr.get_write_value()
		
		print "Attribute value = ", data

		#	Add your own code here
		self.setMotorSpeed(data, 3)


#---- SpeedM3 attribute State Machine -----------------
	def is_SpeedM3_allowed(self, req_type):
		if self.get_state() in [PyTango.DevState.UNKNOWN]:
			#	End of Generated Code
			#	Re-Start of Generated Code
			return False
		return True


#------------------------------------------------------------------
#	Read SpeedM4 attribute
#------------------------------------------------------------------
	def read_SpeedM4(self, attr):
		print "In ", self.get_name(), "::read_SpeedM4()"
		
		#	Add your own code here
		
		attr_SpeedM4_read = self.actualSpeeds[4]
		attr.set_value(attr_SpeedM4_read)


#------------------------------------------------------------------
#	Write SpeedM4 attribute
#------------------------------------------------------------------
	def write_SpeedM4(self, attr):
		print "In ", self.get_name(), "::write_SpeedM4()"
		data = attr.get_write_value()
		
		print "Attribute value = ", data

		#	Add your own code here
		self.setMotorSpeed(data, 4)


#---- SpeedM4 attribute State Machine -----------------
	def is_SpeedM4_allowed(self, req_type):
		if self.get_state() in [PyTango.DevState.UNKNOWN]:
			#	End of Generated Code
			#	Re-Start of Generated Code
			return False
		return True


#------------------------------------------------------------------
#	Read SpeedM5 attribute
#------------------------------------------------------------------
	def read_SpeedM5(self, attr):
		print "In ", self.get_name(), "::read_SpeedM5()"
		
		#	Add your own code here
		
		attr_SpeedM5_read = self.actualSpeeds[5]
		attr.set_value(attr_SpeedM5_read)


#------------------------------------------------------------------
#	Write SpeedM5 attribute
#------------------------------------------------------------------
	def write_SpeedM5(self, attr):
		print "In ", self.get_name(), "::write_SpeedM5()"
		data = attr.get_write_value()
		
		print "Attribute value = ", data

		#	Add your own code here
		self.setMotorSpeed(data, 5)


#---- SpeedM5 attribute State Machine -----------------
	def is_SpeedM5_allowed(self, req_type):
		if self.get_state() in [PyTango.DevState.UNKNOWN]:
			#	End of Generated Code
			#	Re-Start of Generated Code
			return False
		return True


#------------------------------------------------------------------
#	Read PositionM0 attribute
#------------------------------------------------------------------
	def read_PositionM0(self, attr):
		print "In ", self.get_name(), "::read_PositionM0()"
		
		#	Add your own code here
		
		attr_PositionM0_read = self.actualPositions[0]
		attr.set_value(attr_PositionM0_read)


#------------------------------------------------------------------
#	Write PositionM0 attribute
#------------------------------------------------------------------
	def write_PositionM0(self, attr):
		print "In ", self.get_name(), "::write_PositionM0()"
		data = attr.get_write_value()
		
		print "Attribute value = ", data

		#	Add your own code here
		self.setMotorPosition(data, 0)


#---- PositionM0 attribute State Machine -----------------
	def is_PositionM0_allowed(self, req_type):
		if self.get_state() in [PyTango.DevState.UNKNOWN]:
			#	End of Generated Code
			#	Re-Start of Generated Code
			return False
		return True


#------------------------------------------------------------------
#	Read PositionM1 attribute
#------------------------------------------------------------------
	def read_PositionM1(self, attr):
		print "In ", self.get_name(), "::read_PositionM1()"
		
		#	Add your own code here
		
		attr_PositionM1_read = self.actualPositions[1]
		attr.set_value(attr_PositionM1_read)


#------------------------------------------------------------------
#	Write PositionM1 attribute
#------------------------------------------------------------------
	def write_PositionM1(self, attr):
		print "In ", self.get_name(), "::write_PositionM1()"
		data = attr.get_write_value()
		
		print "Attribute value = ", data

		#	Add your own code here
		self.setMotorPosition(data, 1)


#---- PositionM1 attribute State Machine -----------------
	def is_PositionM1_allowed(self, req_type):
		if self.get_state() in [PyTango.DevState.UNKNOWN]:
			#	End of Generated Code
			#	Re-Start of Generated Code
			return False
		return True


#------------------------------------------------------------------
#	Read PositionM2 attribute
#------------------------------------------------------------------
	def read_PositionM2(self, attr):
		print "In ", self.get_name(), "::read_PositionM2()"
		
		#	Add your own code here
		
		attr_PositionM2_read = self.actualPositions[2]
		attr.set_value(attr_PositionM2_read)


#------------------------------------------------------------------
#	Write PositionM2 attribute
#------------------------------------------------------------------
	def write_PositionM2(self, attr):
		print "In ", self.get_name(), "::write_PositionM2()"
		data = attr.get_write_value()
		
		print "Attribute value = ", data

		#	Add your own code here
		self.setMotorPosition(data, 2)


#---- PositionM2 attribute State Machine -----------------
	def is_PositionM2_allowed(self, req_type):
		if self.get_state() in [PyTango.DevState.UNKNOWN]:
			#	End of Generated Code
			#	Re-Start of Generated Code
			return False
		return True


#------------------------------------------------------------------
#	Read PositionM3 attribute
#------------------------------------------------------------------
	def read_PositionM3(self, attr):
		print "In ", self.get_name(), "::read_PositionM3()"
		
		#	Add your own code here
		
		attr_PositionM3_read = self.actualPositions[3]
		attr.set_value(attr_PositionM3_read)


#------------------------------------------------------------------
#	Write PositionM3 attribute
#------------------------------------------------------------------
	def write_PositionM3(self, attr):
		print "In ", self.get_name(), "::write_PositionM3()"
		data = attr.get_write_value()
		
		print "Attribute value = ", data

		#	Add your own code here
		self.setMotorPosition(data, 3)


#---- PositionM3 attribute State Machine -----------------
	def is_PositionM3_allowed(self, req_type):
		if self.get_state() in [PyTango.DevState.UNKNOWN]:
			#	End of Generated Code
			#	Re-Start of Generated Code
			return False
		return True


#------------------------------------------------------------------
#	Read PositionM4 attribute
#------------------------------------------------------------------
	def read_PositionM4(self, attr):
		print "In ", self.get_name(), "::read_PositionM4()"
		
		#	Add your own code here
		
		attr_PositionM4_read = self.actualPositions[4]
		attr.set_value(attr_PositionM4_read)


#------------------------------------------------------------------
#	Write PositionM4 attribute
#------------------------------------------------------------------
	def write_PositionM4(self, attr):
		print "In ", self.get_name(), "::write_PositionM4()"
		data = attr.get_write_value()
		
		print "Attribute value = ", data

		#	Add your own code here
		self.setMotorPosition(data, 4)


#---- PositionM4 attribute State Machine -----------------
	def is_PositionM4_allowed(self, req_type):
		if self.get_state() in [PyTango.DevState.UNKNOWN]:
			#	End of Generated Code
			#	Re-Start of Generated Code
			return False
		return True


#------------------------------------------------------------------
#	Read PositionM5 attribute
#------------------------------------------------------------------
	def read_PositionM5(self, attr):
		print "In ", self.get_name(), "::read_PositionM5()"
		
		#	Add your own code here
		
		attr_PositionM5_read = self.actualPositions[5]
		attr.set_value(attr_PositionM5_read)


#------------------------------------------------------------------
#	Write PositionM5 attribute
#------------------------------------------------------------------
	def write_PositionM5(self, attr):
		print "In ", self.get_name(), "::write_PositionM5()"
		data = attr.get_write_value()
		
		print "Attribute value = ", data

		#	Add your own code here
		self.setMotorPosition(data, 5)


#---- PositionM5 attribute State Machine -----------------
	def is_PositionM5_allowed(self, req_type):
		if self.get_state() in [PyTango.DevState.UNKNOWN]:
			#	End of Generated Code
			#	Re-Start of Generated Code
			return False
		return True


#------------------------------------------------------------------
#	Read LimitSwitchesLeft attribute
#------------------------------------------------------------------
	def read_LimitSwitchesLeft(self, attr):
		print "In ", self.get_name(), "::read_LimitSwitchesLeft()"
		
		#	Add your own code here
		
		attr_LimitSwitchesLeft_read = self.limitSwitches0
		attr.set_value(attr_LimitSwitchesLeft_read, 6)


#---- LimitSwitchesLeft attribute State Machine -----------------
	def is_LimitSwitchesLeft_allowed(self, req_type):
		if self.get_state() in [PyTango.DevState.UNKNOWN]:
			#	End of Generated Code
			#	Re-Start of Generated Code
			return False
		return True


#------------------------------------------------------------------
#	Read LimitSwitchesRight attribute
#------------------------------------------------------------------
	def read_LimitSwitchesRight(self, attr):
		print "In ", self.get_name(), "::read_LimitSwitchesRight()"
		
		#	Add your own code here
		
		attr_LimitSwitchesRight_read = self.limitSwitches1
		attr.set_value(attr_LimitSwitchesRight_read, 6)


#---- LimitSwitchesRight attribute State Machine -----------------
	def is_LimitSwitchesRight_allowed(self, req_type):
		if self.get_state() in [PyTango.DevState.UNKNOWN]:
			#	End of Generated Code
			#	Re-Start of Generated Code
			return False
		return True



#==================================================================
#
#	Trinamic_TMCM610_DS2 command methods
#
#==================================================================

#------------------------------------------------------------------
#	On command:
#
#	Description: Connect to tmcm610 card
#                
#------------------------------------------------------------------
	def On(self):
		print "In ", self.get_name(), "::On()"
		#	Add your own code here
		self.monitorQueue.put('connect')


#------------------------------------------------------------------
#	Off command:
#
#	Description: Disconnect from tmcm610 card
#                
#------------------------------------------------------------------
	def Off(self):
		print "In ", self.get_name(), "::Off()"
		#	Add your own code here
		self.monitorQueue.put('disconnect')


#------------------------------------------------------------------
#	Stop command:
#
#	Description: Stop all motors
#                
#------------------------------------------------------------------
	def Stop(self):
		print "In ", self.get_name(), "::Stop()"
		#	Add your own code here
		try:
			self.hardwareLock.acquire()
			self.info_stream('Stopping all motors')	
			for i in range(6):
				self.TC.stop(i)
		except Exception, e:
			if str(e)=='Unknown error: 47':
				self.info_stream('Motor stop error code 47')
			else:
				self.error_stream(''.join(('Motor stop error ',str(e))))
#				self.set_state(PyTango.DevState.FAULT)
				self.set_status(''.join(('Motor stop error ',str(e))))
#				PyTango.Except.throw_exception('Stopping motors fail',
#											str(e), 'Stop', PyTango.ErrSeverity.ERR)
		finally:
			self.hardwareLock.release()


#---- Stop command State Machine -----------------
	def is_Stop_allowed(self):
		if self.get_state() in [PyTango.DevState.UNKNOWN]:
			#	End of Generated Code
			#	Re-Start of Generated Code
			return False
		return True


#------------------------------------------------------------------
#	MotorCommand command:
#
#	Description: 
#	argin:  DevString	
#	argout: DevString	
#------------------------------------------------------------------
	def MotorCommand(self, argin):
		print "In ", self.get_name(), "::MotorCommand()"
		#	Add your own code here
		result = ''
		try:
			self.hardwareLock.acquire()
			s = ''.join(('result=self.TC.', argin))
			exec(s)
		except Exception, e:
			self.error_stream(''.join(('Motor command error ',str(e))))
			self.set_state(PyTango.DevState.FAULT)
			self.set_status(''.join(('Motor command error ',str(e))))
			PyTango.Except.throw_exception('Motorcommand fail',
											str(e), 'MotorCommand', PyTango.ErrSeverity.ERR)
		finally:
			self.hardwareLock.release()
		print str(result)
		return str(result)


#---- MotorCommand command State Machine -----------------
	def is_MotorCommand_allowed(self):
		if self.get_state() in [PyTango.DevState.UNKNOWN]:
			#	End of Generated Code
			#	Re-Start of Generated Code
			return False
		return True


#==================================================================
#
#	Trinamic_TMCM610_DS2Class class definition
#
#==================================================================
class Trinamic_TMCM610_DS2Class(PyTango.DeviceClass):

	#	Class Properties
	class_property_list = {
		}


	#	Device Properties
	device_property_list = {
		'Port':
			[PyTango.DevShort,
			"Port used for RS232 connection",
			[ 12 ] ],
		}


	#	Command definitions
	cmd_list = {
		'On':
			[[PyTango.DevVoid, ""],
			[PyTango.DevVoid, ""]],
		'Off':
			[[PyTango.DevVoid, ""],
			[PyTango.DevVoid, ""]],
		'Stop':
			[[PyTango.DevVoid, ""],
			[PyTango.DevVoid, ""]],
		'MotorCommand':
			[[PyTango.DevString, ""],
			[PyTango.DevString, ""]],
		}


	#	Attribute definitions
	attr_list = {
		'MaxCurrentM0':
			[[PyTango.DevDouble,
			PyTango.SCALAR,
			PyTango.READ_WRITE],
			{
				'Memorized':"true_without_hard_applied",
			} ],
		'MaxCurrentM1':
			[[PyTango.DevDouble,
			PyTango.SCALAR,
			PyTango.READ_WRITE],
			{
				'Memorized':"true_without_hard_applied",
			} ],
		'MaxCurrentM2':
			[[PyTango.DevDouble,
			PyTango.SCALAR,
			PyTango.READ_WRITE],
			{
				'Memorized':"true_without_hard_applied",
			} ],
		'MaxCurrentM3':
			[[PyTango.DevDouble,
			PyTango.SCALAR,
			PyTango.READ_WRITE],
			{
				'Memorized':"true_without_hard_applied",
			} ],
		'MaxCurrentM4':
			[[PyTango.DevDouble,
			PyTango.SCALAR,
			PyTango.READ_WRITE],
			{
				'Memorized':"true_without_hard_applied",
			} ],
		'MaxCurrentM5':
			[[PyTango.DevDouble,
			PyTango.SCALAR,
			PyTango.READ_WRITE],
			{
				'Memorized':"true_without_hard_applied",
			} ],
		'AccelerationM0':
			[[PyTango.DevDouble,
			PyTango.SCALAR,
			PyTango.READ_WRITE],
			{
				'Memorized':"true_without_hard_applied",
			} ],
		'AccelerationM1':
			[[PyTango.DevDouble,
			PyTango.SCALAR,
			PyTango.READ_WRITE],
			{
				'Memorized':"true_without_hard_applied",
			} ],
		'AccelerationM2':
			[[PyTango.DevDouble,
			PyTango.SCALAR,
			PyTango.READ_WRITE],
			{
				'Memorized':"true_without_hard_applied",
			} ],
		'AccelerationM3':
			[[PyTango.DevDouble,
			PyTango.SCALAR,
			PyTango.READ_WRITE],
			{
				'Memorized':"true_without_hard_applied",
			} ],
		'AccelerationM4':
			[[PyTango.DevDouble,
			PyTango.SCALAR,
			PyTango.READ_WRITE],
			{
				'Memorized':"true_without_hard_applied",
			} ],
		'AccelerationM5':
			[[PyTango.DevDouble,
			PyTango.SCALAR,
			PyTango.READ_WRITE],
			{
				'Memorized':"true_without_hard_applied",
			} ],
		'MicrostepResolutionM0':
			[[PyTango.DevUShort,
			PyTango.SCALAR,
			PyTango.READ_WRITE],
			{
				'Memorized':"true_without_hard_applied",
			} ],
		'MicrostepResolutionM1':
			[[PyTango.DevUShort,
			PyTango.SCALAR,
			PyTango.READ_WRITE],
			{
				'Memorized':"true_without_hard_applied",
			} ],
		'MicrostepResolutionM2':
			[[PyTango.DevUShort,
			PyTango.SCALAR,
			PyTango.READ_WRITE],
			{
				'Memorized':"true_without_hard_applied",
			} ],
		'MicrostepResolutionM3':
			[[PyTango.DevUShort,
			PyTango.SCALAR,
			PyTango.READ_WRITE],
			{
				'Memorized':"true_without_hard_applied",
			} ],
		'MicrostepResolutionM4':
			[[PyTango.DevUShort,
			PyTango.SCALAR,
			PyTango.READ_WRITE],
			{
				'Memorized':"true_without_hard_applied",
			} ],
		'MicrostepResolutionM5':
			[[PyTango.DevUShort,
			PyTango.SCALAR,
			PyTango.READ_WRITE],
			{
				'Memorized':"true_without_hard_applied",
			} ],
		'LimitSwitchPolarityM0':
			[[PyTango.DevBoolean,
			PyTango.SCALAR,
			PyTango.READ_WRITE],
			{
				'Memorized':"true_without_hard_applied",
			} ],
		'LimitSwitchPolarityM1':
			[[PyTango.DevBoolean,
			PyTango.SCALAR,
			PyTango.READ_WRITE],
			{
				'Memorized':"true_without_hard_applied",
			} ],
		'LimitSwitchPolarityM2':
			[[PyTango.DevBoolean,
			PyTango.SCALAR,
			PyTango.READ_WRITE],
			{
				'Memorized':"true_without_hard_applied",
			} ],
		'LimitSwitchPolarityM3':
			[[PyTango.DevBoolean,
			PyTango.SCALAR,
			PyTango.READ_WRITE],
			{
				'Memorized':"true_without_hard_applied",
			} ],
		'LimitSwitchPolarityM4':
			[[PyTango.DevBoolean,
			PyTango.SCALAR,
			PyTango.READ_WRITE],
			{
				'Memorized':"true_without_hard_applied",
			} ],
		'LimitSwitchPolarityM5':
			[[PyTango.DevBoolean,
			PyTango.SCALAR,
			PyTango.READ_WRITE],
			{
				'Memorized':"true_without_hard_applied",
			} ],
		'SpeedM0':
			[[PyTango.DevDouble,
			PyTango.SCALAR,
			PyTango.READ_WRITE],
			{
				'Memorized':"true_without_hard_applied",
			} ],
		'SpeedM1':
			[[PyTango.DevDouble,
			PyTango.SCALAR,
			PyTango.READ_WRITE],
			{
				'Memorized':"true_without_hard_applied",
			} ],
		'SpeedM2':
			[[PyTango.DevDouble,
			PyTango.SCALAR,
			PyTango.READ_WRITE],
			{
				'Memorized':"true_without_hard_applied",
			} ],
		'SpeedM3':
			[[PyTango.DevDouble,
			PyTango.SCALAR,
			PyTango.READ_WRITE],
			{
				'Memorized':"true_without_hard_applied",
			} ],
		'SpeedM4':
			[[PyTango.DevDouble,
			PyTango.SCALAR,
			PyTango.READ_WRITE],
			{
				'Memorized':"true_without_hard_applied",
			} ],
		'SpeedM5':
			[[PyTango.DevDouble,
			PyTango.SCALAR,
			PyTango.READ_WRITE],
			{
				'Memorized':"true_without_hard_applied",
			} ],
		'PositionM0':
			[[PyTango.DevDouble,
			PyTango.SCALAR,
			PyTango.READ_WRITE],
			{
				'Memorized':"true_without_hard_applied",
			} ],
		'PositionM1':
			[[PyTango.DevDouble,
			PyTango.SCALAR,
			PyTango.READ_WRITE],
			{
				'Memorized':"true_without_hard_applied",
			} ],
		'PositionM2':
			[[PyTango.DevDouble,
			PyTango.SCALAR,
			PyTango.READ_WRITE],
			{
				'Memorized':"true_without_hard_applied",
			} ],
		'PositionM3':
			[[PyTango.DevDouble,
			PyTango.SCALAR,
			PyTango.READ_WRITE],
			{
				'Memorized':"true_without_hard_applied",
			} ],
		'PositionM4':
			[[PyTango.DevDouble,
			PyTango.SCALAR,
			PyTango.READ_WRITE],
			{
				'Memorized':"true_without_hard_applied",
			} ],
		'PositionM5':
			[[PyTango.DevDouble,
			PyTango.SCALAR,
			PyTango.READ_WRITE],
			{
				'Memorized':"true_without_hard_applied",
			} ],
		'LimitSwitchesLeft':
			[[PyTango.DevBoolean,
			PyTango.SPECTRUM,
			PyTango.READ, 6]],
		'LimitSwitchesRight':
			[[PyTango.DevBoolean,
			PyTango.SPECTRUM,
			PyTango.READ, 6]],
		}


#------------------------------------------------------------------
#	Trinamic_TMCM610_DS2Class Constructor
#------------------------------------------------------------------
	def __init__(self, name):
		PyTango.DeviceClass.__init__(self, name)
		self.set_type(name);
		print "In Trinamic_TMCM610_DS2Class  constructor"

#==================================================================
#
#	Trinamic_TMCM610_DS2 class main method
#
#==================================================================
if __name__ == '__main__':
	print 'Entering main.'
	try:
		py = PyTango.Util(sys.argv)
		print 'Util object created.'
		py.add_TgClass(Trinamic_TMCM610_DS2Class,Trinamic_TMCM610_DS2,'Trinamic_TMCM610_DS2')

		U = PyTango.Util.instance()
		U.server_init()
		U.server_run()

	except PyTango.DevFailed,e:
		print '-------> Received a DevFailed exception:',e
	except Exception,e:
		print '-------> An unforeseen exception occured....',e
